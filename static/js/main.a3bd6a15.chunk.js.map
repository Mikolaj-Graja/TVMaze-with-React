{"version":3,"sources":["components/Header.js","components/Search.js","components/MoreDetails.js","components/ShowList.js","App.js","serviceWorker.js","index.js"],"names":["Header","Typography","variant","component","Search","state","tvName","tvList","handleInput","event","setState","target","value","handleSubmit","e","fetch","then","respone","json","data","props","updateTVList","catch","err","console","log","preventDefault","action","onSubmit","this","TextField","id","label","onChange","className","Button","color","onClick","React","Component","MoreDetails","infoActive","series","show","name","type","data-dismiss","aria-label","handleClosing","aria-hidden","src","image","medium","alt","summary","genres","map","el","key","weekDays","ShowList","filteredSeries","newList","filterDay","day","filtered","filter","schedule","days","indexOf","moreInfo","closeDetails","ButtonGroup","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","scope","score","genre","premiered","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a3bd6a15.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <Typography variant='h2' component='h1'>\r\n        Shows from TVMaze\r\n      </Typography>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nclass Search extends React.Component {\r\n  state = {\r\n    tvName: '',\r\n    tvList: [],\r\n  };\r\n\r\n  handleInput = (event) => {\r\n    this.setState({ tvName: event.target.value });\r\n  };\r\n  handleSubmit = (e) => {\r\n    fetch(`https://api.tvmaze.com/search/shows?q=${this.state.tvName}`)\r\n      .then((respone) => respone.json())\r\n      .then((data) => {\r\n        this.setState({ tvList: data });\r\n        this.props.updateTVList(this.state.tvList);\r\n      })\r\n      .catch((err) => console.log(`fetch error ${err}`));\r\n    e.preventDefault();\r\n  };\r\n  render() {\r\n    return (\r\n      <form action='submit' onSubmit={this.handleSubmit}>\r\n        <TextField\r\n          id='outlined-basic'\r\n          label='TV Show'\r\n          variant='outlined'\r\n          onChange={this.handleInput}\r\n          value={this.state.tvName}\r\n        />\r\n        <div className='btn-container'>\r\n          <Button\r\n            className='btn'\r\n            variant='outlined'\r\n            color='primary'\r\n            onClick={this.handleSubmit}>\r\n            Search\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nclass MoreDetails extends React.Component {\r\n  state = {};\r\n  render() {\r\n    if (this.props.infoActive) {\r\n      return (\r\n        <div className='modal'>\r\n          <div className='modal-content'>\r\n            <div className='modal-header'>\r\n              <h2 className='modal-title'>{this.props.series.show.name}</h2>\r\n              <button\r\n                type='button'\r\n                className='close'\r\n                data-dismiss='modal'\r\n                aria-label='Close'\r\n                onClick={this.props.handleClosing}>\r\n                <span aria-hidden='true'>&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className='modal-body'>\r\n              <div className='img-container'>\r\n                <img\r\n                  className='poster'\r\n                  src={this.props.series.show.image.medium}\r\n                  alt='seriesPoster`'\r\n                />\r\n              </div>\r\n              <div className='info'>\r\n                <ul>\r\n                  <li>\r\n                    <h4>Overview</h4>\r\n                    <p>{this.props.series.show.summary}</p>\r\n                  </li>\r\n                  <li>\r\n                    <h4>Genres</h4>\r\n                    <p>\r\n                      {this.props.series.show.genres.map((el) => {\r\n                        return <span key={el}>{el} </span>;\r\n                      })}{' '}\r\n                    </p>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <div className='modal-footer'></div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else return <div></div>;\r\n    //   console.log(props);\r\n    //   return <div>cos</div>;\r\n  }\r\n}\r\n\r\nexport default MoreDetails;\r\n","import React from 'react';\r\nimport Search from './Search';\r\nimport MoreDetails from './MoreDetails';\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper,\r\n  Button,\r\n  ButtonGroup,\r\n} from '@material-ui/core';\r\n\r\nconst weekDays = [\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n  'Sunday',\r\n];\r\nclass ShowList extends React.Component {\r\n  state = {\r\n    tvList: [],\r\n    filteredSeries: [],\r\n    infoActive: false,\r\n    series: {},\r\n  };\r\n  updateTVList = (newList) => {\r\n    this.setState({ tvList: newList, filteredSeries: newList });\r\n  };\r\n\r\n  filterDay = (day) => {\r\n    console.log(day);\r\n\r\n    const filtered = this.state.tvList.filter((el) => {\r\n      return !el.show.schedule.days.indexOf(day);\r\n    });\r\n    console.log(filtered);\r\n\r\n    this.setState({\r\n      filteredSeries: [...filtered],\r\n    });\r\n  };\r\n  moreInfo = (series) => {\r\n    this.setState({ infoActive: true, series: series });\r\n  };\r\n  closeDetails = () => {\r\n    this.setState({ infoActive: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MoreDetails\r\n          infoActive={this.state.infoActive}\r\n          series={this.state.series}\r\n          handleClosing={this.closeDetails}\r\n        />\r\n        <Search updateTVList={this.updateTVList} />\r\n        <ButtonGroup\r\n          variant='contained'\r\n          color='primary'\r\n          aria-label='contained primary button group'>\r\n          {weekDays.map((day) => (\r\n            <Button key={day} onClick={() => this.filterDay(day)}>\r\n              {day}\r\n            </Button>\r\n          ))}\r\n        </ButtonGroup>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table aria-label='simple table'>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Score</TableCell>\r\n                <TableCell align='right'>Title</TableCell>\r\n                <TableCell align='right'>Genres</TableCell>\r\n                <TableCell align='right'>Date of premiere</TableCell>\r\n                <TableCell align='right'>Schedule - days</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {this.state.filteredSeries.map((series) => (\r\n                <TableRow\r\n                  className='pointer'\r\n                  key={series.show.id}\r\n                  onClick={() => this.moreInfo(series)}>\r\n                  <TableCell component='th' scope='row'>\r\n                    {series.score}\r\n                  </TableCell>\r\n                  <TableCell align='right'>{series.show.name}</TableCell>\r\n                  <TableCell align='right'>\r\n                    {series.show.genres.map((genre) => `${genre}, `)}\r\n                  </TableCell>\r\n                  <TableCell align='right'>{series.show.premiered}</TableCell>\r\n                  <TableCell align='right'>\r\n                    {series.show.schedule.days.map((day) => `${day}, `)}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowList;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport ShowList from './components/ShowList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <ShowList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}